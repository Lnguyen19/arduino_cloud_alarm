#include "arduino_secrets.h"
// LiquidCrystal - Version: Latest
#include <LiquidCrystal.h>

/*
  Sketch generated by the Arduino IoT Cloud Thing "Nano_Alarm"
  Arduino IoT Cloud Variables description
  The following variables are automatically generated and updated when changes are made to the Thing

  int countdown_;
  int hours_alarm;
  int minutes_alarm;
  int seconds_alarm;
  int sounds_;
  bool alarm_state;
  bool led;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "RTCZero.h"
#include <ArduinoBLE.h>
const int buzzer = 2;
long previousMillis = 0;
int interval = 0;
int ledState = LOW;
LiquidCrystal lcd(7, 8, 9, 10, 11, 12);
RTCZero alarm;
int tempPin = 0;
char con[5];
void setup() {

  Serial.begin(9600);
  delay(1500);
  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you'll get.
     The default is 0 (only errors).
     Maximum is 4
  */

  setDebugMessageLevel(2);
  pinMode(LED_BUILTIN, OUTPUT);
  ArduinoCloud.printDebugInfo();

  alarm.begin();

  led = false;

  lcd.begin(16, 2);
  // lcd.print("Hello World");
  pinMode(buzzer, OUTPUT);
}

void loop() {
  ArduinoCloud.update();
  Serial.print(alarm.getHours());
  Serial.print(":");
  Serial.print(alarm.getMinutes());
  Serial.print(":");
  Serial.println(alarm.getSeconds());
  // lcd.setCursor(0,0);
  // lcd.print(con);
  lcd.setCursor(0, 1);
  lcd.print(alarm.getHours());
  lcd.print(":");
  lcd.print(alarm.getMinutes());
  lcd.print(":");
  int u;
  u = alarm.getSeconds();
  if (u > 59) {
    u  = 1;
  }
  lcd.print(u);

 
  char ui;
  if (led == true) {
    tone(buzzer, sounds_); 
    delay(1000);        
    noTone(buzzer);   
    delay(1000);        
    tone(buzzer, sounds_); 
    delay(1000);        // 
    noTone(buzzer);     // 
    delay(1000);        // 
    tone(buzzer, sounds_); 
    delay(1000);        // ...for 1 sec
    noTone(buzzer);     // Stop sound...
    delay(1000);        // ...for 1sec
    tone(buzzer, sounds_); // 
    delay(1000);        // ...for 1 sec
    noTone(buzzer);     // Stop sound...
    delay(1000);        // ...for 1sec
tone(buzzer, sounds_); // 
    delay(1000);        // ...for 1 sec
    noTone(buzzer);     // Stop sound...
    delay(1000); 







    ui = 'W';
    led = false;
    lcd.print("Wake Up");



  }

  else {
    ui = ' ';
  }
  lcd.print(" ");
  lcd.print(ui);





}
void onHoursAlarmChange() {
  alarm.setAlarmTime(hours_alarm, minutes_alarm, seconds_alarm);
}

void onMinutesAlarmChange() {
  alarm.setAlarmTime(hours_alarm, minutes_alarm, seconds_alarm);
}

void onSecondsAlarmChange() {
  alarm.setAlarmTime(hours_alarm, minutes_alarm, seconds_alarm);
}

void onAlarmStateChange() {
  if (alarm_state == true) {
    alarm.setAlarmTime(hours_alarm, minutes_alarm, seconds_alarm);
    alarm.enableAlarm(alarm.MATCH_HHMMSS);
    alarm.attachInterrupt(alarmMatch);

  }

}

void alarmMatch() {
  led = true;

}


/*
  Since Countdown is READ_WRITE variable, onCountdownChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCountdownChange()  {
  //countdown is set manually by user in dashboard
  if (countdown_ < 0 || countdown_ == 0) {
    countdown_ = 0;
    // led=true;
    //lcd.print("Time is Up");
    tone(buzzer, sounds_); // Send 1KHz sound signal...
    delay(1000);        // ...for 1 sec
    noTone(buzzer);     // Stop sound...
    delay(1000);        // ...for 1sec
  }
  else {
    //led=false;
    while (countdown_ >= 0) {
      lcd.setCursor(0, 0);
      lcd.print(countdown_);
      countdown_--;
      if (countdown_ == 0) {
        //delay(1000);
        tone(buzzer, sounds_); // Send 1KHz sound signal...
        //countdown_ = 0;
        delay(1000);        // ...for 1 sec
        noTone(buzzer);
        tone(buzzer, sounds_); 
    delay(1000);   
     noTone(buzzer);
 
      }
      delay(1000);
    }
  }

}
//no need to do anything to the onSoundChange() function my boi.
/*
  Since Sounds is READ_WRITE variable, onSoundsChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoundsChange()  {
  // Add your code here to act upon Sounds change
}